plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenLocal()
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}

		filter {
			includeGroup "maven.modrinth"
		}
	}

    maven {
        url "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup "com.jamieswhiteshirt"
        }
    }

	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { name = "Figura Maven"; description = "Figura"; url = "https://maven.figuramc.org/releases" }
	maven { url = "https://maven.minecraftforge.net/" }
	exclusiveContent {
		forRepository {
			maven { url 'https://jitpack.io' }
		}
		filter {
			includeGroup 'com.github'
		}
	}

	maven { url "https://maven.krysztal.dev/releases" }
	maven { url "https://maven.ladysnake.org/releases/" }

	exclusiveContent {
		forRepository {
			maven {
				url "https://maven.pool.net.eu.org"
			}
		}
		filter {
			includeGroup("org.eu.net.pool")
		}
	}
}

fabricApi {
	configureDataGeneration()
}

tasks.withType(JavaCompile) {
	dependsOn(gradle.includedBuild("CurieAPI").task(":build"))
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.timeworndevs.curie:CurieAPI:1.0.0"
	//modImplementation "maven.modrinth:curieapi:1.0.0"
    include modImplementation("com.jamieswhiteshirt:reach-entity-attributes:${project.reach_attributes_version}")
	include modApi("org.eu.net.pool:mutationkit:0.1.0-SNAPSHOT")

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "com.github.glitchfiend:TerraBlender-fabric:${project.minecraft_version}-${project.terrablender_version}"

	modCompileOnly("org.figuramc:figura-fabric:0.1.4+1.20.1")
	compileOnly("com.github.FiguraMC.luaj:luaj-core:3.0.8-figura")
	// Uncomment the following line to enable the deprecated Fabric API modules.
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}

processResources {
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from("src/main/resources")
	from("src/main/generated")
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}

	dependsOn(runDatagen)
	from("src/main/generated") {
		exclude ".cache"
	}
}

clean.delete("src/main/generated")

sourcesJar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from("src/main/resources")
	from("src/main/generated")
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}

	mustRunAfter(runDatagen)
	from("src/main/generated") {
		exclude(".cache")
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
loom {
	runs {
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
		datagen {
			inherit server
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${modid}"

			runDir "build/datagen"
		}
	}
}

sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}
